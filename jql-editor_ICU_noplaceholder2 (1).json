{"smartling" : {
    "translate_paths": [{
    "path": "*/message",
    "key": "{*}"
    }],
  "string_format": "icu"
  },
    "jql-editor.common.validation.unknown-error": {
        "message": "Unable to parse the query.",
        "description": "Message shown when the query could not be parsed due to an unknown error."
    },
    "jql-editor.plugins.autocomplete.options-found": {
        "message": "Choose from the suggested list of options below.",
        "description": "This message is read by screen readers when autocomplete suggestions are available in the JQL editor."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingCFButReceived": {
        "message": "Expecting a field name but got '['. Did you mean 'cf['?",
        "description": "When a field was expected but a left bracket was received without a 'cf' prefix."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingCustomFieldId": {
        "message": "Expecting a custom field id enclosed by '[ ]' after 'cf'. Example: 'cf[10021]'.",
        "description": "When a custom field id was expected before the end of the query. Text wrapped in single quotes in our message refer to specific tokens in the query so they should not be translated."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingFieldBeforeEOF": {
        "message": "Expecting a field name before the end of the query.",
        "description": "When a field was expected before the end of the query."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingFieldButReceived": {
        "message": "Expecting a field name but got '{received}'. You must surround '{received}' in quotation marks to use it as a field name.",
        "description": "When a field was expected but another token was received."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingFieldPropertyIdBeforeEOF": {
        "message": "Expecting a property id before the end of the query.",
        "description": "When a field property ID was expected before the end of the query."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingFieldPropertyIdButReceived": {
        "message": "Expecting a property id but got '{received}'. You must surround '{received}' in quotation marks to use it as a value.",
        "description": "When a field property ID was expected but another token was received."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingFunctionArgBeforeEOF": {
        "message": "Expecting a function argument before the end of the query.",
        "description": "When a function argument was expected before the end of the query."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingFunctionArgButReceived": {
        "message": "Expecting a function argument but got '{received}'. You must surround '{received}' in quotation marks to use it as a value.",
        "description": "When a function argument was expected but another token was received."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingFunctionBeforeEOF": {
        "message": "Expecting a function before the end of the query.",
        "description": "When a function was expected before the end of the query."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingFunctionButReceived": {
        "message": "Expecting a function but got '{received}'. You must surround '{received}' in quotation marks to use it as a value.",
        "description": "When a function was expected but another token was received."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingListBeforeEOF": {
        "message": "Expecting a list before the end of the query.",
        "description": "When a list was expected before the end of the query."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingListButReceived": {
        "message": "Expecting a list but got '{received}'. You must surround '{received}' in quotation marks to use it as a value.",
        "description": "When a list was expected but another token was received."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingListOrFunctionBeforeEOF": {
        "message": "Expecting a list or function before the end of the query.",
        "description": "When a list or function was expected before the end of the query."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingListOrFunctionButReceived": {
        "message": "Expecting a list or function but got '{received}'. You must surround '{received}' in quotation marks to use it as a value.",
        "description": "When a list or function was expected but another token was received."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingMultipleTokensBeforeEOF": {
        "message": "Expecting {firstExpectedTokens} or '{lastExpectedToken}' before the end of the query.",
        "description": "When there are still tokens expected before the query can end."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingMultipleTokensButReceived": {
        "message": "Expecting {firstExpectedTokens} or '{lastExpectedToken}' but got '{received}'.",
        "description": "When the text the user entered does not match any of the expected tokens."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingOperandBeforeEOF": {
        "message": "Expecting either a value, list or function before the end of the query.",
        "description": "When an operand was expected before the end of the query."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingOperandButReceived": {
        "message": "Expecting either a value, list or function but got '{received}'. You must surround '{received}' in quotation marks to use it as a value.",
        "description": "When an operand was expected but another token was received."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingOperatorBeforeEOF": {
        "message": "Expecting an operator before the end of the query. The valid operators are '=', '!=', '<', '>', '<=', '>=', '~', '!~', 'IN', 'NOT IN', 'IS' and 'IS NOT'.",
        "description": "When an operator was expected before the end of the query."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingOperatorButReceived": {
        "message": "Expecting an operator but got '{received}'. The valid operators are '=', '!=', '<', '>', '<=', '>=', '~', '!~', 'IN', 'NOT IN', 'IS' and 'IS NOT'.",
        "description": "When an operator was expected but another token was received."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingTokenBeforeEOF": {
        "message": "Expecting '{expectedToken}' before the end of the query.",
        "description": "When an expected token needs to be inserted before the query can end."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingTokenButReceived": {
        "message": "Expecting '{expectedToken}' but got '{received}'.",
        "description": "When the text the user entered does not match the expected tokens."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingValueBeforeEOF": {
        "message": "Expecting a value before the end of the query.",
        "description": "When a value was expected before the end of the query."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingValueButReceived": {
        "message": "Expecting a value but got '{received}'. You must surround '{received}' in quotation marks to use it as a value.",
        "description": "When a value was expected but another token was received."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingValueOrFunctionBeforeEOF": {
        "message": "Expecting a value or function before the end of the query.",
        "description": "When a value or function was expected before the end of the query."
    },
    "jql-editor.plugins.jql-ast.error-messages.expectingValueOrFunctionButReceived": {
        "message": "Expecting a value or function but got '{received}'. You must surround '{received}' in quotation marks to use it as a value.",
        "description": "When a value or function was expected but another token was received."
    },
    "jql-editor.plugins.jql-ast.error-messages.illegalChar": {
        "message": "The character '{char}' must be escaped. Use the escape '{escapedChar}' instead.",
        "description": "When an illegal character is encountered in a query."
    },
    "jql-editor.plugins.jql-ast.error-messages.illegalEscape": {
        "message": "'{received}' is an illegal JQL escape sequence. The valid escape sequences are \\u005C', \\u005C\", \\u005Ct, \\u005Cn, \\u005Cr, \\u005C\\u005C, '\\u005C ' and \\u005CuXXXX.",
        "description": "When there are no valid tokens following an escape character."
    },
    "jql-editor.plugins.jql-ast.error-messages.illegalEscapeBlank": {
        "message": "The escape sequence has not been completed. The valid escape sequences are \\u005C', \\u005C\", \\u005Ct, \\u005Cn, \\u005Cr, \\u005C\\u005C, '\\u005C ' and \\u005CuXXXX.",
        "description": "When there are no valid tokens following an escape character."
    },
    "jql-editor.plugins.jql-ast.error-messages.reservedChar": {
        "message": "The character '{char}' is a reserved JQL character. You must enclose it in a string or use the escape '{escapedChar}' instead.",
        "description": "When the user has a reserved character in the query."
    },
    "jql-editor.plugins.jql-ast.error-messages.reservedWord": {
        "message": "'{word}' is a reserved JQL word. You must surround it in quotation marks to use it in a query.",
        "description": "When the user has a reserved word in the query."
    },
    "jql-editor.plugins.jql-ast.error-messages.unfinishedString": {
        "message": "The quoted string '{received}' has not been completed.",
        "description": "When a string is missing an opening or closing quote."
    },
    "jql-editor.plugins.jql-ast.error-messages.unfinishedStringBlank": {
        "message": "The quoted string has not been completed.",
        "description": "When a string is missing an opening or closing quote."
    },
    "jql-editor.plugins.jql-ast.error-messages.unknownErrorAtToken": {
        "message": "Unable to parse the query at '{received}'.",
        "description": "When the query could not be parsed when a token was reached."
    },
    "jql-editor.ui.input-label": {
        "message": "JQL query",
        "description": "Label for the input where users can type a JQL query. This text is not visible and is only read by screen readers."
    },
    "jql-editor.ui.jql-editor-controls-content.expand-toggle.button-label": {
        "message": "Editor",
        "description": "Label that tells the user the expand toggle is controlling the JQL editor."
    },
    "jql-editor.ui.jql-editor-controls-content.expand-toggle.collapse-tooltip": {
        "message": "Collapse editor",
        "description": "Tooltip to show for the collapse icon which shrinks the height of the editor"
    },
    "jql-editor.ui.jql-editor-controls-content.expand-toggle.expand-tooltip": {
        "message": "Expand editor",
        "description": "Tooltip to show for the expand icon which increases the height of the editor"
    },
    "jql-editor.ui.jql-editor-controls-content.search.label": {
        "message": "Search",
        "description": "Label to show for the search icon which the user can press to perform a search."
    },
    "jql-editor.ui.jql-editor-footer-content.jql-editor-help.syntax-help.description": {
        "message": "Open JQL syntax help in a new tab.",
        "description": "Description read when the syntax help link is focused."
    },
    "jql-editor.ui.jql-editor-footer-content.jql-editor-help.syntax-help.tooltip": {
        "message": "Syntax help",
        "description": "Tooltip to show when the syntax help link is focused."
    },
    "jql-editor.ui.jql-editor-help.field-new-line-command": {
        "message": "<b>Enter</b> to add a new line",
        "description": "In field mode, message to inform users to press the 'Enter' key on the keyboard to add a new line into the query."
    },
    "jql-editor.ui.jql-editor-help.new-line-command": {
        "message": "<b>Shift+Enter</b> to add a new line",
        "description": "In search mode, message to inform users to press the 'Shift' and 'Enter' keys on the keyboard to add a new line into the query."
    },
    "jql-editor.ui.jql-editor-help.search-command": {
        "message": "<b>Enter</b> to search",
        "description": "Message to inform users to press the 'Enter' key on the keyboard to search a query."
    },
    "jql-editor.ui.jql-validation-message.jql-error-position": {
        "message": "(line {lineNumber}, character {charPosition})",
        "description": "Show the line and character position that an error occurs in the JQL string, e.g. (line 1, character 23)"
    }
}